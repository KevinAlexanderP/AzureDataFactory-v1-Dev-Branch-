{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "608799-data"
		},
		"AzureBlobStorage1itretail_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1itretail'"
		},
		"AzureSqlDatabase2_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase2'"
		},
		"LSAzureSQLRetail_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LSAzureSQLRetail'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1itretail')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1itretail_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "db for bankchurners",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase2_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LSAzureSQLRetail')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LSAzureSQLRetail_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase2",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CLIENTNUM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Attrition_Flag",
						"type": "nvarchar"
					},
					{
						"name": "Customer_Age",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Gender",
						"type": "nvarchar"
					},
					{
						"name": "Dependent_count",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Education_Level",
						"type": "nvarchar"
					},
					{
						"name": "Marital_Status",
						"type": "nvarchar"
					},
					{
						"name": "Income_Category",
						"type": "nvarchar"
					},
					{
						"name": "Card_Category",
						"type": "nvarchar"
					},
					{
						"name": "Months_on_book",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Total_Relationship_Count",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Months_Inactive_12_mon",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Contacts_Count_12_mon",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Credit_Limit",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Total_Revolving_Bal",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Avg_Open_To_Buy",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Total_Amt_Chng_Q4_Q1",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Total_Trans_Amt",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Total_Trans_Ct",
						"type": "tinyint",
						"precision": 3
					},
					{
						"name": "Total_Ct_Chng_Q4_Q1",
						"type": "float",
						"precision": 15
					},
					{
						"name": "Avg_Utilization_Ratio",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "BankChurners"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "part-00000",
						"folderPath": "retail_db/order_items",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filtered_on_Transactions')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderItems')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "part-00000",
						"folderPath": "retail_db/order_items",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrderItemsParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "order_items_parquet",
						"folderPath": "retail_db_parquet/order_items",
						"container": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "part-00000",
						"folderPath": "retail_db/orders",
						"container": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersParquet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1itretail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "retail_db_parquet/orders",
						"container": "data"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1itretail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RetailOrders')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LSAzureSQLRetail",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_date",
						"type": "date"
					},
					{
						"name": "order_customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_status",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "orders"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LSAzureSQLRetail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CPOrderscsvtoSqlTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyCSVDataToSqlServer",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "order_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "order_date",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "order_customer_id",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "order_status",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OrdersCSV",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "RetailOrders",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-27T04:51:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdersCSV')]",
				"[concat(variables('factoryId'), '/datasets/RetailOrders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQLAuthor')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "RetailOrders",
								"type": "DatasetReference"
							},
							"name": "AzureSQLOrders"
						}
					],
					"sinks": [
						{
							"name": "OrdersCache"
						}
					],
					"transformations": [],
					"scriptLines": [
						"parameters{",
						"     order_month as string ('2013-07')",
						"}",
						"source(output(",
						"          order_id as integer,",
						"          order_date as date,",
						"          order_customer_id as integer,",
						"          order_status as string,",
						"          order_month as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: (\"SELECT o.*, FORMAT(order_date,'yyyy-MM' ) AS order_month FROM dbo.orders as o WHERE order_date LIKE '{$order_month}%'\"),",
						"     format: 'query') ~> AzureSQLOrders",
						"AzureSQLOrders sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> OrdersCache"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RetailOrders')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFComputeDailyProductRevenue')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "DFComputeDailyProductRevenue",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdersCSV",
								"type": "DatasetReference"
							},
							"name": "orders"
						},
						{
							"dataset": {
								"referenceName": "OrderItems",
								"type": "DatasetReference"
							},
							"name": "OrderIt"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "OrderSTFilter"
						},
						{
							"name": "ordersJoinOrderItems"
						},
						{
							"name": "aggregate12"
						}
					],
					"scriptLines": [
						"source(output(",
						"          order_id as integer,",
						"          order_date as timestamp,",
						"          order_customer as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> orders",
						"source(output(",
						"          order_item_id as integer,",
						"          order_item_order_id as integer,",
						"          order_item_product_id as integer,",
						"          order_item_quantity as integer,",
						"          order_item_subtotal as float,",
						"          order_item_product_price as float",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: true,",
						"     ignoreNoFilesFound: false) ~> OrderIt",
						"orders filter(in(['COMPLETE','CLOSED'], order_status)) ~> OrderSTFilter",
						"OrderSTFilter, OrderIt join(order_id == order_item_order_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> ordersJoinOrderItems",
						"ordersJoinOrderItems aggregate(groupBy(order_date,",
						"          order_item_product_id),",
						"     revenue = round(sum(order_item_subtotal),2)) ~> aggregate12",
						"aggregate12 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: false,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdersCSV')]",
				"[concat(variables('factoryId'), '/datasets/OrderItems')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFFileFormatConverter')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "OrdersCSV",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "OrdersParquet",
								"type": "DatasetReference"
							},
							"name": "sinker11",
							"description": "for orders"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          orders_id as integer,",
						"          order_date as timestamp,",
						"          order_customer_id as integer,",
						"          order_status as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1) ~> sinker11"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OrdersCSV')]",
				"[concat(variables('factoryId'), '/datasets/OrdersParquet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "Databasebankraw"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Filtered_on_Transactions",
								"type": "DatasetReference"
							},
							"name": "sink12"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CLIENTNUM as integer,",
						"          Attrition_Flag as string,",
						"          Customer_Age as integer,",
						"          Gender as string,",
						"          Dependent_count as integer,",
						"          Education_Level as string,",
						"          Marital_Status as string,",
						"          Income_Category as string,",
						"          Card_Category as string,",
						"          Months_on_book as integer,",
						"          Total_Relationship_Count as integer,",
						"          Months_Inactive_12_mon as integer,",
						"          Contacts_Count_12_mon as integer,",
						"          Credit_Limit as double,",
						"          Total_Revolving_Bal as integer,",
						"          Avg_Open_To_Buy as double,",
						"          Total_Amt_Chng_Q4_Q1 as double,",
						"          Total_Trans_Amt as integer,",
						"          Total_Trans_Ct as integer,",
						"          Total_Ct_Chng_Q4_Q1 as double,",
						"          Avg_Utilization_Ratio as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Databasebankraw",
						"Databasebankraw filter(Total_Trans_Amt>10) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink12"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/Filtered_on_Transactions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OrdersDemo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "AzureSQLAuthor",
								"type": "DataFlowReference",
								"parameters": {
									"order_month": "'2013-07'"
								},
								"datasetParameters": {
									"AzureSQLOrders": {},
									"OrdersCache": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-03-08T02:21:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/AzureSQLAuthor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PLComputeDailyPRRevenue')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFComputeDailyPRRevenue",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFComputeDailyProductRevenue",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"orders": {},
									"OrderIt": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T17:16:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFComputeDailyProductRevenue')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PLFileFormatConverter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FileFormatConverterOrders",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFFileFormatConverter",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sinker11": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-02-25T16:51:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFFileFormatConverter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Databasebankraw": {},
									"sink12": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow2')]"
			]
		}
	]
}